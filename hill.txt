  private void gotoHillClimbingBTNActionPerformed(java.awt.event.ActionEvent evt) {                                                    
          // TODO add your handling code here:
        List<boolean[][]> successors = new ArrayList<>(); // Your list of all successors
        boolean [][]queenMatrix=new boolean[n][n];
        boolean [][]tempQueenMatrix=new boolean[n][n];
        int []pos=new int[n];
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                queenMatrix[i][j]= matrixLabels[i][j].getName().equals("1") ? true : false;
                if(queenMatrix[i][j])
                    pos[j]=i;
            }
        }
        int counter=0;
//        for(int i=0;i<1;i++)
//        {
            for(int k=0;k<n;k++)
            {
                for (int v = 0; v < n; v++) 
                    System.arraycopy(queenMatrix[v], 0, tempQueenMatrix[v], 0, n);
                
                     tempQueenMatrix[pos[k]][k]=false;
                for(int otherPos=0;otherPos<n;otherPos++)
                {
                    if(otherPos!=pos[k])
                    {
                        tempQueenMatrix[otherPos][k]=true;
                        System.out.println("Successor "+(counter++));
                        printMatrix(tempQueenMatrix);
                    
                          boolean[][] newSuccessor = new boolean[n][n];      
                          for (int v = 0; v < n; v++) 
                                System.arraycopy(tempQueenMatrix[v], 0, newSuccessor[v], 0, n);
                               ///////////add successors to the list
                            successors.add(newSuccessor);
                            tempQueenMatrix[otherPos][k] = false;
                    }
                }
                
            }
                            ///////////calculate heuristic and find the best successor 
                            boolean[][] bestSuccessor = null;
                            int bestHeuristic = Integer.MAX_VALUE;

                            for (boolean[][] successor : successors) 
                            {
                                int heuristic = calculateHeuristic(successor);
                                 System.out.println(heuristic);
                                if (heuristic < bestHeuristic) 
                                {
                                    bestHeuristic = heuristic;
                                    bestSuccessor = successor;
                                }
                            }
                            System.out.println("Best Successor:");
                            printMatrix(bestSuccessor);
    }                                                   
    
    
    private void printMatrix(boolean[][] matrix) {
    for (int i = 0; i < matrix.length; i++) {
        for (int j = 0; j < matrix[i].length; j++) {
            System.out.print(matrix[i][j] ? "1 " : "0 ");
        }
        System.out.println();
    }
    System.out.println();
    }
    
    private int calculateHeuristic(boolean[][] queenMatrix) {
        int heuristic = 0;
          int n = queenMatrix.length;

          // Check for conflicts in each row
          for (int row = 0; row < n; row++) {
              int queenCount = 0;
              for (int col = 0; col < n; col++) {
                  if (queenMatrix[row][col]) {
                      queenCount++;
                  }
              }
              // Increase the heuristic value by the number of conflicts in the row
              heuristic += (queenCount * (queenCount - 1)) / 2;
          }

          // Check for conflicts in each diagonal
          for (int i = 0; i < n; i++) {
              for (int j = 0; j < n; j++) {
                  if (queenMatrix[i][j]) {
                      // Check for conflicts in the diagonal containing the current queen
                      for (int k = 1; k < n; k++) {
                          if (i + k < n && j + k < n && queenMatrix[i + k][j + k]) {
                              heuristic++;
                          }
                          if (i - k >= 0 && j + k < n && queenMatrix[i - k][j + k]) {
                              heuristic++;
                          }
                      }
                  }
              }
          }

          return heuristic;
}